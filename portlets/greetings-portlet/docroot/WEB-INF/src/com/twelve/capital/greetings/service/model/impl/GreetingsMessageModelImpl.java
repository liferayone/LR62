/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.twelve.capital.greetings.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.twelve.capital.greetings.service.model.GreetingsMessage;
import com.twelve.capital.greetings.service.model.GreetingsMessageModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GreetingsMessage service. Represents a row in the &quot;greetings_GreetingsMessage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.twelve.capital.greetings.service.model.GreetingsMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GreetingsMessageImpl}.
 * </p>
 *
 * @author neha.kakkar
 * @see GreetingsMessageImpl
 * @see com.twelve.capital.greetings.service.model.GreetingsMessage
 * @see com.twelve.capital.greetings.service.model.GreetingsMessageModel
 * @generated
 */
public class GreetingsMessageModelImpl extends BaseModelImpl<GreetingsMessage>
	implements GreetingsMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a greetings message model instance should use the {@link com.twelve.capital.greetings.service.model.GreetingsMessage} interface instead.
	 */
	public static final String TABLE_NAME = "greetings_GreetingsMessage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "StatusId", Types.BIGINT },
			{ "Message", Types.VARCHAR },
			{ "button_color", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table greetings_GreetingsMessage (StatusId LONG not null primary key,Message VARCHAR(75) null,button_color VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table greetings_GreetingsMessage";
	public static final String ORDER_BY_JPQL = " ORDER BY greetingsMessage.StatusId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY greetings_GreetingsMessage.StatusId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.twelve.capital.greetings.service.model.GreetingsMessage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.twelve.capital.greetings.service.model.GreetingsMessage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.twelve.capital.greetings.service.model.GreetingsMessage"));

	public GreetingsMessageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _StatusId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStatusId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _StatusId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GreetingsMessage.class;
	}

	@Override
	public String getModelClassName() {
		return GreetingsMessage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("StatusId", getStatusId());
		attributes.put("Message", getMessage());
		attributes.put("button_color", getButton_color());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long StatusId = (Long)attributes.get("StatusId");

		if (StatusId != null) {
			setStatusId(StatusId);
		}

		String Message = (String)attributes.get("Message");

		if (Message != null) {
			setMessage(Message);
		}

		String button_color = (String)attributes.get("button_color");

		if (button_color != null) {
			setButton_color(button_color);
		}
	}

	@Override
	public long getStatusId() {
		return _StatusId;
	}

	@Override
	public void setStatusId(long StatusId) {
		_StatusId = StatusId;
	}

	@Override
	public String getMessage() {
		if (_Message == null) {
			return StringPool.BLANK;
		}
		else {
			return _Message;
		}
	}

	@Override
	public void setMessage(String Message) {
		_Message = Message;
	}

	@Override
	public String getButton_color() {
		if (_button_color == null) {
			return StringPool.BLANK;
		}
		else {
			return _button_color;
		}
	}

	@Override
	public void setButton_color(String button_color) {
		_button_color = button_color;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GreetingsMessage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GreetingsMessage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GreetingsMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GreetingsMessageImpl greetingsMessageImpl = new GreetingsMessageImpl();

		greetingsMessageImpl.setStatusId(getStatusId());
		greetingsMessageImpl.setMessage(getMessage());
		greetingsMessageImpl.setButton_color(getButton_color());

		greetingsMessageImpl.resetOriginalValues();

		return greetingsMessageImpl;
	}

	@Override
	public int compareTo(GreetingsMessage greetingsMessage) {
		long primaryKey = greetingsMessage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GreetingsMessage)) {
			return false;
		}

		GreetingsMessage greetingsMessage = (GreetingsMessage)obj;

		long primaryKey = greetingsMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GreetingsMessage> toCacheModel() {
		GreetingsMessageCacheModel greetingsMessageCacheModel = new GreetingsMessageCacheModel();

		greetingsMessageCacheModel.StatusId = getStatusId();

		greetingsMessageCacheModel.Message = getMessage();

		String Message = greetingsMessageCacheModel.Message;

		if ((Message != null) && (Message.length() == 0)) {
			greetingsMessageCacheModel.Message = null;
		}

		greetingsMessageCacheModel.button_color = getButton_color();

		String button_color = greetingsMessageCacheModel.button_color;

		if ((button_color != null) && (button_color.length() == 0)) {
			greetingsMessageCacheModel.button_color = null;
		}

		return greetingsMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{StatusId=");
		sb.append(getStatusId());
		sb.append(", Message=");
		sb.append(getMessage());
		sb.append(", button_color=");
		sb.append(getButton_color());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.twelve.capital.greetings.service.model.GreetingsMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>StatusId</column-name><column-value><![CDATA[");
		sb.append(getStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>button_color</column-name><column-value><![CDATA[");
		sb.append(getButton_color());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GreetingsMessage.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GreetingsMessage.class
		};
	private long _StatusId;
	private String _Message;
	private String _button_color;
	private GreetingsMessage _escapedModel;
}