/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.twelve.capital.greetings.service.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.twelve.capital.greetings.service.model.User_Status;
import com.twelve.capital.greetings.service.service.User_StatusLocalService;
import com.twelve.capital.greetings.service.service.persistence.GreetingsMessagePersistence;
import com.twelve.capital.greetings.service.service.persistence.User_StatusPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the user_ status local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.twelve.capital.greetings.service.service.impl.User_StatusLocalServiceImpl}.
 * </p>
 *
 * @author neha.kakkar
 * @see com.twelve.capital.greetings.service.service.impl.User_StatusLocalServiceImpl
 * @see com.twelve.capital.greetings.service.service.User_StatusLocalServiceUtil
 * @generated
 */
public abstract class User_StatusLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements User_StatusLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.twelve.capital.greetings.service.service.User_StatusLocalServiceUtil} to access the user_ status local service.
	 */

	/**
	 * Adds the user_ status to the database. Also notifies the appropriate model listeners.
	 *
	 * @param user_Status the user_ status
	 * @return the user_ status that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public User_Status addUser_Status(User_Status user_Status)
		throws SystemException {
		user_Status.setNew(true);

		return user_StatusPersistence.update(user_Status);
	}

	/**
	 * Creates a new user_ status with the primary key. Does not add the user_ status to the database.
	 *
	 * @param UserId the primary key for the new user_ status
	 * @return the new user_ status
	 */
	@Override
	public User_Status createUser_Status(long UserId) {
		return user_StatusPersistence.create(UserId);
	}

	/**
	 * Deletes the user_ status with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param UserId the primary key of the user_ status
	 * @return the user_ status that was removed
	 * @throws PortalException if a user_ status with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public User_Status deleteUser_Status(long UserId)
		throws PortalException, SystemException {
		return user_StatusPersistence.remove(UserId);
	}

	/**
	 * Deletes the user_ status from the database. Also notifies the appropriate model listeners.
	 *
	 * @param user_Status the user_ status
	 * @return the user_ status that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public User_Status deleteUser_Status(User_Status user_Status)
		throws SystemException {
		return user_StatusPersistence.remove(user_Status);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(User_Status.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return user_StatusPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.twelve.capital.greetings.service.model.impl.User_StatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return user_StatusPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.twelve.capital.greetings.service.model.impl.User_StatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return user_StatusPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return user_StatusPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return user_StatusPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public User_Status fetchUser_Status(long UserId) throws SystemException {
		return user_StatusPersistence.fetchByPrimaryKey(UserId);
	}

	/**
	 * Returns the user_ status with the primary key.
	 *
	 * @param UserId the primary key of the user_ status
	 * @return the user_ status
	 * @throws PortalException if a user_ status with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public User_Status getUser_Status(long UserId)
		throws PortalException, SystemException {
		return user_StatusPersistence.findByPrimaryKey(UserId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return user_StatusPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the user_ statuses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.twelve.capital.greetings.service.model.impl.User_StatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of user_ statuses
	 * @param end the upper bound of the range of user_ statuses (not inclusive)
	 * @return the range of user_ statuses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<User_Status> getUser_Statuses(int start, int end)
		throws SystemException {
		return user_StatusPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of user_ statuses.
	 *
	 * @return the number of user_ statuses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getUser_StatusesCount() throws SystemException {
		return user_StatusPersistence.countAll();
	}

	/**
	 * Updates the user_ status in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param user_Status the user_ status
	 * @return the user_ status that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public User_Status updateUser_Status(User_Status user_Status)
		throws SystemException {
		return user_StatusPersistence.update(user_Status);
	}

	/**
	 * Returns the greetings message local service.
	 *
	 * @return the greetings message local service
	 */
	public com.twelve.capital.greetings.service.service.GreetingsMessageLocalService getGreetingsMessageLocalService() {
		return greetingsMessageLocalService;
	}

	/**
	 * Sets the greetings message local service.
	 *
	 * @param greetingsMessageLocalService the greetings message local service
	 */
	public void setGreetingsMessageLocalService(
		com.twelve.capital.greetings.service.service.GreetingsMessageLocalService greetingsMessageLocalService) {
		this.greetingsMessageLocalService = greetingsMessageLocalService;
	}

	/**
	 * Returns the greetings message persistence.
	 *
	 * @return the greetings message persistence
	 */
	public GreetingsMessagePersistence getGreetingsMessagePersistence() {
		return greetingsMessagePersistence;
	}

	/**
	 * Sets the greetings message persistence.
	 *
	 * @param greetingsMessagePersistence the greetings message persistence
	 */
	public void setGreetingsMessagePersistence(
		GreetingsMessagePersistence greetingsMessagePersistence) {
		this.greetingsMessagePersistence = greetingsMessagePersistence;
	}

	/**
	 * Returns the user_ status local service.
	 *
	 * @return the user_ status local service
	 */
	public com.twelve.capital.greetings.service.service.User_StatusLocalService getUser_StatusLocalService() {
		return user_StatusLocalService;
	}

	/**
	 * Sets the user_ status local service.
	 *
	 * @param user_StatusLocalService the user_ status local service
	 */
	public void setUser_StatusLocalService(
		com.twelve.capital.greetings.service.service.User_StatusLocalService user_StatusLocalService) {
		this.user_StatusLocalService = user_StatusLocalService;
	}

	/**
	 * Returns the user_ status persistence.
	 *
	 * @return the user_ status persistence
	 */
	public User_StatusPersistence getUser_StatusPersistence() {
		return user_StatusPersistence;
	}

	/**
	 * Sets the user_ status persistence.
	 *
	 * @param user_StatusPersistence the user_ status persistence
	 */
	public void setUser_StatusPersistence(
		User_StatusPersistence user_StatusPersistence) {
		this.user_StatusPersistence = user_StatusPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.twelve.capital.greetings.service.model.User_Status",
			user_StatusLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.twelve.capital.greetings.service.model.User_Status");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return User_Status.class;
	}

	protected String getModelClassName() {
		return User_Status.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = user_StatusPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.twelve.capital.greetings.service.service.GreetingsMessageLocalService.class)
	protected com.twelve.capital.greetings.service.service.GreetingsMessageLocalService greetingsMessageLocalService;
	@BeanReference(type = GreetingsMessagePersistence.class)
	protected GreetingsMessagePersistence greetingsMessagePersistence;
	@BeanReference(type = com.twelve.capital.greetings.service.service.User_StatusLocalService.class)
	protected com.twelve.capital.greetings.service.service.User_StatusLocalService user_StatusLocalService;
	@BeanReference(type = User_StatusPersistence.class)
	protected User_StatusPersistence user_StatusPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private User_StatusLocalServiceClpInvoker _clpInvoker = new User_StatusLocalServiceClpInvoker();
}