/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.twelve.capital.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.twelve.capital.model.adminalert;
import com.twelve.capital.model.adminalertModel;
import com.twelve.capital.model.adminalertSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the adminalert service. Represents a row in the &quot;aa_adminalert&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.twelve.capital.model.adminalertModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link adminalertImpl}.
 * </p>
 *
 * @author neha.kakkar
 * @see adminalertImpl
 * @see com.twelve.capital.model.adminalert
 * @see com.twelve.capital.model.adminalertModel
 * @generated
 */
@JSON(strict = true)
public class adminalertModelImpl extends BaseModelImpl<adminalert>
	implements adminalertModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a adminalert model instance should use the {@link com.twelve.capital.model.adminalert} interface instead.
	 */
	public static final String TABLE_NAME = "aa_adminalert";
	public static final Object[][] TABLE_COLUMNS = {
			{ "alertId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "location", Types.VARCHAR },
			{ "resolution", Types.VARCHAR },
			{ "expectedResolutionTime", Types.TIMESTAMP },
			{ "resolutionStatus", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table aa_adminalert (alertId LONG not null primary key,groupId LONG,createDate DATE null,modifiedDate DATE null,location VARCHAR(75) null,resolution VARCHAR(75) null,expectedResolutionTime DATE null,resolutionStatus VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table aa_adminalert";
	public static final String ORDER_BY_JPQL = " ORDER BY adminalert.alertId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY aa_adminalert.alertId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.twelve.capital.model.adminalert"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.twelve.capital.model.adminalert"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static adminalert toModel(adminalertSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		adminalert model = new adminalertImpl();

		model.setAlertId(soapModel.getAlertId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLocation(soapModel.getLocation());
		model.setResolution(soapModel.getResolution());
		model.setExpectedResolutionTime(soapModel.getExpectedResolutionTime());
		model.setResolutionStatus(soapModel.getResolutionStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<adminalert> toModels(adminalertSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<adminalert> models = new ArrayList<adminalert>(soapModels.length);

		for (adminalertSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.twelve.capital.model.adminalert"));

	public adminalertModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _alertId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAlertId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _alertId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return adminalert.class;
	}

	@Override
	public String getModelClassName() {
		return adminalert.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("alertId", getAlertId());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("location", getLocation());
		attributes.put("resolution", getResolution());
		attributes.put("expectedResolutionTime", getExpectedResolutionTime());
		attributes.put("resolutionStatus", getResolutionStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long alertId = (Long)attributes.get("alertId");

		if (alertId != null) {
			setAlertId(alertId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String resolution = (String)attributes.get("resolution");

		if (resolution != null) {
			setResolution(resolution);
		}

		Date expectedResolutionTime = (Date)attributes.get(
				"expectedResolutionTime");

		if (expectedResolutionTime != null) {
			setExpectedResolutionTime(expectedResolutionTime);
		}

		String resolutionStatus = (String)attributes.get("resolutionStatus");

		if (resolutionStatus != null) {
			setResolutionStatus(resolutionStatus);
		}
	}

	@JSON
	@Override
	public long getAlertId() {
		return _alertId;
	}

	@Override
	public void setAlertId(long alertId) {
		_alertId = alertId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public String getResolution() {
		if (_resolution == null) {
			return StringPool.BLANK;
		}
		else {
			return _resolution;
		}
	}

	@Override
	public void setResolution(String resolution) {
		_resolution = resolution;
	}

	@JSON
	@Override
	public Date getExpectedResolutionTime() {
		return _expectedResolutionTime;
	}

	@Override
	public void setExpectedResolutionTime(Date expectedResolutionTime) {
		_expectedResolutionTime = expectedResolutionTime;
	}

	@JSON
	@Override
	public String getResolutionStatus() {
		if (_resolutionStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _resolutionStatus;
		}
	}

	@Override
	public void setResolutionStatus(String resolutionStatus) {
		_resolutionStatus = resolutionStatus;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			adminalert.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public adminalert toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (adminalert)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		adminalertImpl adminalertImpl = new adminalertImpl();

		adminalertImpl.setAlertId(getAlertId());
		adminalertImpl.setGroupId(getGroupId());
		adminalertImpl.setCreateDate(getCreateDate());
		adminalertImpl.setModifiedDate(getModifiedDate());
		adminalertImpl.setLocation(getLocation());
		adminalertImpl.setResolution(getResolution());
		adminalertImpl.setExpectedResolutionTime(getExpectedResolutionTime());
		adminalertImpl.setResolutionStatus(getResolutionStatus());

		adminalertImpl.resetOriginalValues();

		return adminalertImpl;
	}

	@Override
	public int compareTo(adminalert adminalert) {
		long primaryKey = adminalert.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof adminalert)) {
			return false;
		}

		adminalert adminalert = (adminalert)obj;

		long primaryKey = adminalert.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<adminalert> toCacheModel() {
		adminalertCacheModel adminalertCacheModel = new adminalertCacheModel();

		adminalertCacheModel.alertId = getAlertId();

		adminalertCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			adminalertCacheModel.createDate = createDate.getTime();
		}
		else {
			adminalertCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			adminalertCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			adminalertCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		adminalertCacheModel.location = getLocation();

		String location = adminalertCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			adminalertCacheModel.location = null;
		}

		adminalertCacheModel.resolution = getResolution();

		String resolution = adminalertCacheModel.resolution;

		if ((resolution != null) && (resolution.length() == 0)) {
			adminalertCacheModel.resolution = null;
		}

		Date expectedResolutionTime = getExpectedResolutionTime();

		if (expectedResolutionTime != null) {
			adminalertCacheModel.expectedResolutionTime = expectedResolutionTime.getTime();
		}
		else {
			adminalertCacheModel.expectedResolutionTime = Long.MIN_VALUE;
		}

		adminalertCacheModel.resolutionStatus = getResolutionStatus();

		String resolutionStatus = adminalertCacheModel.resolutionStatus;

		if ((resolutionStatus != null) && (resolutionStatus.length() == 0)) {
			adminalertCacheModel.resolutionStatus = null;
		}

		return adminalertCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{alertId=");
		sb.append(getAlertId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", resolution=");
		sb.append(getResolution());
		sb.append(", expectedResolutionTime=");
		sb.append(getExpectedResolutionTime());
		sb.append(", resolutionStatus=");
		sb.append(getResolutionStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.twelve.capital.model.adminalert");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>alertId</column-name><column-value><![CDATA[");
		sb.append(getAlertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resolution</column-name><column-value><![CDATA[");
		sb.append(getResolution());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expectedResolutionTime</column-name><column-value><![CDATA[");
		sb.append(getExpectedResolutionTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resolutionStatus</column-name><column-value><![CDATA[");
		sb.append(getResolutionStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = adminalert.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			adminalert.class
		};
	private long _alertId;
	private long _groupId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _location;
	private String _resolution;
	private Date _expectedResolutionTime;
	private String _resolutionStatus;
	private adminalert _escapedModel;
}